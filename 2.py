
import asyncio
import aiohttp
import json
from sqlalchemy import create_engine, Column, Integer, String, Text
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackContext, filters
from telegram.error import BadRequest, RetryAfter

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ---
Base = declarative_base()

class UserHistory(Base):
    __tablename__ = "user_history"
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, nullable=False)
    history = Column(Text, nullable=False)

# –°–æ–∑–¥–∞–Ω–∏–µ SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
engine = create_engine("sqlite:///chatbot.db")
Base.metadata.create_all(engine)
Session = sessionmaker(bind=engine)
db_session = Session()

# --- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ API ---
async def stream_request_to_api(user_message, user_id):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–π HTTP POST-–∑–∞–ø—Ä–æ—Å –∫ API —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    api_url = "http://37.194.195.213:35420/query"
    payload = {
        
        "messages": [
            { "role": 'user', "content": user_message }
          ],
          "max_tokens" : 300,
        
    }
    headers = {
        "Content-Type": "application/json"
    }

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(api_url, json=payload, headers=headers) as response:
                if response.status != 200:
                    yield f"–û—à–∏–±–∫–∞ API: {response.status}"
                    return

                async for line in response.content:
                    decoded_line = line.decode('utf-8').strip()
                    if decoded_line.startswith('data: '):
                        try:
                            json_str = decoded_line[6:]
                            if json_str == '[DONE]':
                                break
                            #chunk = json.loads(json_str)
                            #delta = chunk['choices'][0]['delta'].get('content', '')
                            print(json_str)
                            if json_str:
                                yield json_str
                        except (json.JSONDecodeError, KeyError) as e:
                            print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
        yield f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î ---
def get_user_history(user_id):
    user = db_session.query(UserHistory).filter(UserHistory.user_id == user_id).first()
    if user:
        return user.history
    return "–ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞: –ü—Ä–∏–≤–µ—Ç! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"

def update_user_history(user_id, new_message):
    user = db_session.query(UserHistory).filter(UserHistory.user_id == user_id).first()
    if user:
        user.history += f"\n{new_message}"
    else:
        user = UserHistory(user_id=user_id, history=new_message)
        db_session.add(user)
    db_session.commit()



async def start(update: Update, context: CallbackContext):
    """
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞.
    """
    keyboard = [
        ['–†—É—Å—Å–∫–∏–π \U0001F1F7\U0001F1FA',
        'English \U0001F1EC\U0001F1E7'],
        ['‰∏≠Êñá \U0001F1E8\U0001F1F3']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language / ËØ∑ÈÄâÊã©ËØ≠Ë®Ä:",
        reply_markup=reply_markup
    )

async def handle_message(update: Update, context: CallbackContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ—Ç–æ–∫–æ–≤–æ–π –ø–µ—Ä–µ–¥–∞—á–µ–π –æ—Ç–≤–µ—Ç–∞.
    """
    user_id = update.effective_user.id
    user_message = update.message.text

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    if user_message in ['–†—É—Å—Å–∫–∏–π \U0001F1F7\U0001F1FA', 'English \U0001F1EC\U0001F1E7', '‰∏≠Êñá \U0001F1E8\U0001F1F3']:
        if user_message == '–†—É—Å—Å–∫–∏–π \U0001F1F7\U0001F1FA':
            response = "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ \U0001F1F7\U0001F1FA. –ö–∞–∫ —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?"
        elif user_message == 'English üá¨üáß':
            response = "You have selected English \U0001F1EC\U0001F1E7. How can I help you?"
        else:
            response = "ÊÇ®ÈÄâÊã©‰∫Ü‰∏≠Êñá \U0001F1E8\U0001F1F3„ÄÇÊàëËÉΩ‰∏∫ÊÇ®ÂÅö‰ªÄ‰πàÔºü"
        await update.message.reply_text(response, reply_markup=ReplyKeyboardRemove())
        return

    # –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    history = get_user_history(user_id)
    history += f"\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_message}"
    update_user_history(user_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_message}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ—Ç–≤–µ—Ç–∞
    sent_message = await update.message.reply_text("–ù–∞—á–∏–Ω–∞—é –æ—Ç–≤–µ—Ç...")

    # –°—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç —Å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
    full_response = ""
    displayed_response = ""
    last_update_time = asyncio.get_event_loop().time()


    async def periodic_update():
        nonlocal full_response, displayed_response, last_update_time
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—É—é —á–∞—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
            new_part = full_response[len(displayed_response):]
            if new_part:
                await context.bot.edit_message_text(
                    chat_id=update.effective_chat.id, 
                    message_id=sent_message.message_id, 
                    text=full_response
                )
                displayed_response = full_response
                last_update_time = asyncio.get_event_loop().time()
        except RetryAfter as e:
            print(f"Flood control: waiting {e.retry_after} seconds")
            await asyncio.sleep(e.retry_after)
        except BadRequest as e:
            if "Message is not modified" not in str(e):
                print(f"Error updating message: {e}")

    try:
        async for chunk in stream_request_to_api(history, user_id):
            full_response += chunk

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            current_time = asyncio.get_event_loop().time()
            if current_time - last_update_time >= 1.5:
                await periodic_update()

            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏
            await asyncio.sleep(0.1)

        # –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        await context.bot.edit_message_text(
            chat_id=update.effective_chat.id, 
            message_id=sent_message.message_id, 
            text=full_response
        )

    except Exception as e:
        await context.bot.edit_message_text(
            chat_id=update.effective_chat.id, 
            message_id=sent_message.message_id, 
            text=f"–û—à–∏–±–∫–∞: {str(e)}"
        )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
    update_user_history(user_id, f"–ë–æ—Ç: {full_response[:20]}...")


# --- –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
if __name__ == "__main__":
    # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application = ApplicationBuilder().token("7583980596:AAELwT6OEXJwHCjPQFqNTwJ4X2RpvMrbAM4").build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    application.run_polling()
